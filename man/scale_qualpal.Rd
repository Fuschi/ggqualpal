% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qualpalr.R
\name{scale_qualpal}
\alias{scale_qualpal}
\alias{scale_color_qualpal}
\alias{scale_colour_qualpal}
\alias{scale_fill_qualpal}
\title{Discrete colour/fill scales using qualpalr}
\usage{
scale_color_qualpal(
  name = ggplot2::waiver(),
  ...,
  direction = 1L,
  n_max = NULL,
  aesthetics = "colour"
)

scale_colour_qualpal(
  name = ggplot2::waiver(),
  ...,
  direction = 1L,
  n_max = NULL,
  aesthetics = "colour"
)

scale_fill_qualpal(
  name = ggplot2::waiver(),
  ...,
  direction = 1L,
  n_max = NULL,
  aesthetics = "fill"
)
}
\arguments{
\item{name}{Aesthetic name used by the scale and legend; defaults to
\code{\link[ggplot2:waiver]{ggplot2::waiver()}}, meaning it will be inferred.}

\item{...}{Additional arguments forwarded to \code{\link[qualpalr:qualpal]{qualpalr::qualpal()}}, and/or
accepted by \code{\link[ggplot2:discrete_scale]{ggplot2::discrete_scale()}} (e.g. \code{limits}, \code{breaks}, \code{labels},
\code{drop}, \code{na.translate}, \code{guide}).}

\item{direction}{Integer \code{1} to keep the order (default) or \code{-1} to reverse it.}

\item{n_max}{Optional integer to cap the number of colours requested from
\code{qualpal()}. If \code{NULL} (default), no cap is applied.}

\item{aesthetics}{The ggplot2 aesthetics this scale works with. Usually
\code{"colour"} (or \code{"color"}) or \code{"fill"}.}
}
\value{
A \code{ggplot2} scale object.
}
\description{
Discrete \code{ggplot2} scales powered by \code{\link[qualpalr:qualpal]{qualpalr::qualpal()}}, ideal for
\strong{qualitative} palettes. You can pass any argument accepted by \code{qualpal()}
(e.g., \code{colorspace}, \code{cvd}, \code{bg}, \code{metric}, \code{extend}).
}
\details{
These scales are direct wrappers around \code{ggplot2::discrete_scale()}. Internally,
they provide a palette function (see \code{\link[=pal_qualpal]{pal_qualpal()}}) that ggplot2 calls with
the required number of levels (\code{n}).

Common \code{qualpal()} arguments:
\itemize{
\item \code{colorspace}: HSL/LCH ranges as a list, a \code{"Source:Palette"} string, or an RGB matrix/data frame.
\item \code{cvd}: named numeric vector \code{c(protan = ..., deutan = ..., tritan = ...)} in \verb{[0, 1]}.
\item \code{bg}: a background colour that should be avoided (hex or any valid R colour).
\item \code{metric}: one of \code{"ciede2000"}, \code{"din99d"}, \code{"cie76"}.
\item \code{extend}: a fixed set of initial colours (hex or RGB matrix/data frame).
}
}
\examples{
if (requireNamespace("ggplot2", quietly = TRUE)) {
  library(ggplot2)
  # Basic usage (colour)
  ggplot(mtcars, aes(factor(cyl), mpg, colour = factor(cyl))) +
    geom_point(size = 3) +
    scale_color_qualpal()

  # Basic usage (fill)
  ggplot(mpg, aes(class, fill = class)) +
    geom_bar() +
    scale_fill_qualpal()

  # Reverse order
  ggplot(mpg, aes(class, fill = class)) +
    geom_bar() +
    scale_fill_qualpal(direction = -1)

  # Forward qualpal() arguments: custom HSL ranges + metric
  ggplot(mpg, aes(class, colour = class)) +
    geom_point(aes(y = displ), position = position_jitter(width = .2)) +
    scale_color_qualpal(
      colorspace = list(h = c(0, 360), s = c(0.3, 0.7), l = c(0.45, 0.85)),
      metric = "ciede2000"
    )

  # Simulate partial protan deficiency and avoid white background
  ggplot(mpg, aes(class, fill = class)) +
    geom_bar() +
    scale_fill_qualpal(
      cvd = c(protan = 0.4, deutan = 0, tritan = 0),
      bg = "white"
    )

  # Extend with fixed starting colours
  ggplot(mpg, aes(class, fill = class)) +
    geom_bar() +
    scale_fill_qualpal(extend = c("#2D6A4F", "#E63946"))
}
}
